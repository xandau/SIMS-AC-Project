name: Deploy Frontend & Backend to ECS Fargate

on:
  workflow_run:
    workflows: ["Create Docker Images and Push to AWS"]   
    types:
      - completed
  workflow_dispatch: ## allows for manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION:            ${{ secrets.AWS_REGION }}
      ECR_REGISTRY:          ${{ secrets.ECR_REGISTRY }}
      CLUSTER_NAME:          ${{ secrets.CLUSTER_NAME }}
      FRONTEND_REPO:         ${{ secrets.FRONTEND_REPO }}
      BACKEND_REPO:          ${{ secrets.BACKEND_REPO }}
      FRONTEND_SERVICE:      ${{ secrets.FRONTEND_SERVICE_NAME }}
      BACKEND_SERVICE:       ${{ secrets.BACKEND_SERVICE_NAME }}
      FRONTEND_SUBNET_IDS:   ${{ secrets.FRONTEND_SUBNET_IDS }}
      BACKEND_SUBNET_IDS:    ${{ secrets.BACKEND_SUBNET_IDS }}
      FRONTEND_SG_IDS:       ${{ secrets.FRONTEND_SG_IDS }}
      BACKEND_SG_IDS:        ${{ secrets.BACKEND_SG_IDS }}
      BACKEND_DB_SECRET_ARN: ${{ secrets.BACKEND_DB_SECRET_ARN }}
      BACKEND_REDIS_SECRET_ARN: ${{ secrets.BACKEND_REDIS_SECRET_ARN }}
      ALB_TARGET_GROUP_ARN : ${{ secrets.ALB_TARGET_GROUP_ARN }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Set image tags
        run: |
          # Use the run number of the triggering 'Create Docker Images and Push to AWS' workflow.
          # This matches the 'v<run_number>' tag pushed by that workflow.
          TRIGGERING_WORKFLOW_RUN_NUMBER=${{ github.event.workflow_run.run_number }}
          TAG="v${TRIGGERING_WORKFLOW_RUN_NUMBER}"
          echo "Deploying with image tag: ${TAG}"
          echo "FRONTEND_IMAGE=${ECR_REGISTRY}/${FRONTEND_REPO}:${TAG}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=${ECR_REGISTRY}/${BACKEND_REPO}:${TAG}" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Frontend 

      - name: Render frontend task definition
        id: render-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/taskdef-frontend.json
          container-name:  frontend
          image:           ${{ env.FRONTEND_IMAGE }}

      - name: Register frontend task definition
        id: register-frontend
        run: |
          TD_FILE="${{ steps.render-frontend.outputs.task-definition }}"
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://$TD_FILE \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-def-arn=$ARN" >> $GITHUB_OUTPUT

      - name: Create or update frontend service
        env:
          FRONT_TASK_DEF_ARN: ${{ steps.register-frontend.outputs.task-def-arn }}
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$FRONTEND_SERVICE" --query 'services[0].status' --output text 2>/dev/null || echo "NOT_FOUND")

          if [ "$SERVICE_STATUS" == "ACTIVE" ]; then
            echo "Service $FRONTEND_SERVICE is ACTIVE. Waiting for it to become stable before update..."
            aws ecs wait services-stable --cluster "$CLUSTER_NAME" --services "$FRONTEND_SERVICE" # <-- Corrected here
            echo "Service $FRONTEND_SERVICE is stable. Proceeding with update."
            aws ecs update-service \
              --cluster "$CLUSTER_NAME" \
              --service "$FRONTEND_SERVICE" \
              --task-definition "$FRONT_TASK_DEF_ARN" \
              --force-new-deployment
          elif [ "$SERVICE_STATUS" == "INACTIVE" ]; then
            echo "Service $FRONTEND_SERVICE is INACTIVE. Deleting and recreating."
            aws ecs delete-service --cluster "$CLUSTER_NAME" --service "$FRONTEND_SERVICE" --force
            echo "Waiting for service $FRONTEND_SERVICE to be deleted..."
            aws ecs wait services-inactive --cluster "$CLUSTER_NAME" --services "$FRONTEND_SERVICE"
            echo "Service $FRONTEND_SERVICE deleted. Recreating."
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$FRONTEND_SERVICE" \
              --task-definition "$FRONT_TASK_DEF_ARN" \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${FRONTEND_SUBNET_IDS}],securityGroups=[${FRONTEND_SG_IDS}],assignPublicIp=ENABLED}"
          elif [ "$SERVICE_STATUS" != "NOT_FOUND" ]; then
            # Service exists but is not ACTIVE or INACTIVE (e.g., DRAINING)
            echo "Service $FRONTEND_SERVICE exists with status $SERVICE_STATUS. Attempting to update."
            aws ecs update-service \
              --cluster "$CLUSTER_NAME" \
              --service "$FRONTEND_SERVICE" \
              --task-definition "$FRONT_TASK_DEF_ARN" \
              --desired-count 1 \
              --force-new-deployment
          else
            # Service does not exist
            echo "Service $FRONTEND_SERVICE does not exist. Creating new service."
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$FRONTEND_SERVICE" \
              --task-definition "$FRONT_TASK_DEF_ARN" \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${FRONTEND_SUBNET_IDS}],securityGroups=[${FRONTEND_SG_IDS}],assignPublicIp=ENABLED}"
          fi

      # Backend 

      - name: Render backend task definition
        id: render-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/taskdef-backend.json
          container-name:  backend
          image:           ${{ env.BACKEND_IMAGE }}

      - name: Register frontend task definition
        id: register-backend
        run: |
          TD_FILE="${{ steps.render-backend.outputs.task-definition }}"
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://$TD_FILE \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-def-arn=$ARN" >> $GITHUB_OUTPUT

      - name: Create or update backend service
        env:
          BACK_TASK_DEF_ARN: ${{ steps.register-backend.outputs.task-def-arn }}
        run: |
          STATUS=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$BACKEND_SERVICE" \
            --query 'services[0].status' \
            --output text 2>/dev/null || echo "NOT_FOUND" | xargs)

          if [ "$STATUS" = "ACTIVE" ]; then
            echo "Service $BACKEND_SERVICE is ACTIVE. Waiting for stability…"
            aws ecs wait services-stable \
              --cluster "$CLUSTER_NAME" \
              --services "$BACKEND_SERVICE"
            echo "Updating service to new task definition…"
            aws ecs update-service \
              --cluster "$CLUSTER_NAME" \
              --service "$BACKEND_SERVICE" \
              --task-definition "$BACK_TASK_DEF_ARN" \
              --force-new-deployment \
              --load-balancers "[]" # Explicitly remove/ensure no load balancer

          elif [ "$STATUS" = "INACTIVE" ]; then
            echo "Service $BACKEND_SERVICE is INACTIVE. Recreating (without load balancer)..."
            aws ecs delete-service \
              --cluster "$CLUSTER_NAME" \
              --service "$BACKEND_SERVICE" \
              --force
            aws ecs wait services-inactive \
              --cluster "$CLUSTER_NAME" \
              --services "$BACKEND_SERVICE"
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$BACKEND_SERVICE" \
              --task-definition "$BACK_TASK_DEF_ARN" \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${BACKEND_SUBNET_IDS}],securityGroups=[${BACKEND_SG_IDS}],assignPublicIp=DISABLED}"

          else # Handles NOT_FOUND or any other unexpected status by attempting to create
            echo "Service $BACKEND_SERVICE status is '$STATUS'. Creating/Recreating service (without load balancer)..."
            # Attempt to delete if it exists in a weird state, ignore error if not found
            aws ecs delete-service --cluster "$CLUSTER_NAME" --service "$BACKEND_SERVICE" --force 2>/dev/null || true
            if [ "$STATUS" != "NOT_FOUND" ]; then # Only wait if it wasn't NOT_FOUND initially
                aws ecs wait services-inactive --cluster "$CLUSTER_NAME" --services "$BACKEND_SERVICE" 2


name: Deploy Frontend & Backend to ECS Fargate

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION:            ${{ secrets.AWS_REGION }}
      ECR_REGISTRY:          ${{ secrets.ECR_REGISTRY }}
      CLUSTER_NAME:          ${{ secrets.CLUSTER_NAME }}
      FRONTEND_REPO:         ${{ secrets.FRONTEND_REPO }}
      BACKEND_REPO:          ${{ secrets.BACKEND_REPO }}
      FRONTEND_SERVICE:      ${{ secrets.FRONTEND_SERVICE_NAME }}
      BACKEND_SERVICE:       ${{ secrets.BACKEND_SERVICE_NAME }}
      FRONTEND_SUBNET_IDS:   ${{ secrets.FRONTEND_SUBNET_IDS }}
      BACKEND_SUBNET_IDS:    ${{ secrets.BACKEND_SUBNET_IDS }}
      FRONTEND_SG_IDS:       ${{ secrets.FRONTEND_SG_IDS }}
      BACKEND_SG_IDS:        ${{ secrets.BACKEND_SG_IDS }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Set image tags
        run: |
          TAG=${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}
          echo "FRONTEND_IMAGE=${ECR_REGISTRY}/${FRONTEND_REPO}:${TAG}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=${ECR_REGISTRY}/${BACKEND_REPO}:${TAG}" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # ── Frontend ────────────────────────────────────────────────────────────

      - name: Render frontend task definition
        id: render-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/taskdef-frontend.json
          container-name:  frontend
          image:           ${{ env.FRONTEND_IMAGE }}

      - name: Register frontend task definition
        id: register-frontend
        run: |
          echo "${{ steps.render-frontend.outputs.task-definition }}" > taskdef-frontend.json
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://taskdef-frontend.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-def-arn=$ARN" >> $GITHUB_OUTPUT

      - name: Create or update frontend service
        env:
          FRONT_TASK_DEF_ARN: ${{ steps.register-frontend.outputs.task-def-arn }}
        run: |
          if aws ecs describe-services \
               --cluster "$CLUSTER_NAME" \
               --services "$FRONTEND_SERVICE" \
               --query 'services[0].status' --output text \
               | grep -q "ACTIVE"; then
            aws ecs update-service \
              --cluster "$CLUSTER_NAME" \
              --service "$FRONTEND_SERVICE" \
              --task-definition "$FRONT_TASK_DEF_ARN" \
              --force-new-deployment
          else
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$FRONTEND_SERVICE" \
              --task-definition "$FRONT_TASK_DEF_ARN" \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${FRONTEND_SUBNET_IDS}],securityGroups=[${FRONTEND_SG_IDS}],assignPublicIp=ENABLED}"
          fi

      # ── Backend ─────────────────────────────────────────────────────────────

      - name: Render backend task definition
        id: render-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/taskdef-backend.json
          container-name:  backend
          image:           ${{ env.BACKEND_IMAGE }}

      - name: Register backend task definition
        id: register-backend
        run: |
          echo "${{ steps.render-backend.outputs.task-definition }}" > taskdef-backend.json
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://taskdef-backend.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-def-arn=$ARN" >> $GITHUB_OUTPUT

      - name: Create or update backend service
        env:
          BACK_TASK_DEF_ARN: ${{ steps.register-backend.outputs.task-def-arn }}
        run: |
          if aws ecs describe-services \
               --cluster "$CLUSTER_NAME" \
               --services "$BACKEND_SERVICE" \
               --query 'services[0].status' --output text \
               | grep -q "ACTIVE"; then
            aws ecs update-service \
              --cluster "$CLUSTER_NAME" \
              --service "$BACKEND_SERVICE" \
              --task-definition "$BACK_TASK_DEF_ARN" \
              --force-new-deployment
          else
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$BACKEND_SERVICE" \
              --task-definition "$BACK_TASK_DEF_ARN" \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${BACKEND_SUBNET_IDS}],securityGroups=[${BACKEND_SG_IDS}],assignPublicIp=DISABLED}"
          fi

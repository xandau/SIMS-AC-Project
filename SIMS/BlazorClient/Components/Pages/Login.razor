@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input type="hidden" name="formName" value="loginForm" />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();

    [Inject]
    private HttpClient Http { get; set; } = default!;

    private async Task HandleValidSubmit()
    {
        // Attach form name to the loginModel
        loginModel.FormName = "loginForm";

        // Debugging: Check the values of loginModel.Email and loginModel.Password
        Console.WriteLine($"Email: {loginModel.Email}, Password: {loginModel.Password}, FormName: {loginModel.FormName}");

        // Call the login API
        var response = await Http.PostAsJsonAsync("http://127.0.0.1:7292/auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            // Handle successful login
            var token = await response.Content.ReadAsStringAsync();
            // Store the token, navigate to another page, etc.
        }
        else
        {
            // Handle login failure
            var error = await response.Content.ReadAsStringAsync();
            // Display error message, etc.
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;

        public string FormName { get; set; } = string.Empty; // New form name property
    }
}

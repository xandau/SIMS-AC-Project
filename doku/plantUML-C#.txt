@startuml
skinparam classAttributeIconSize 0
skinparam linetype ortho

class JwtService {
    - IConfiguration _configuration
    + JwtService()
    + string GenerateAccessToken(User user)
    + string GenerateRefreshToken()
    + long GetClaimsFromToken(string token)
}

class RedisTokenStore {
    - IDatabase _storage
    + RedisTokenStore()
    + Task StoreRefreshTokenAsync(long userId, string username, string refresh_token)
    + Task<string[]> GetUserFromRefreshToken(string refresh_token)
    + Task<bool> RemoveRefreshTokenAsync(string refresh_token)
}

class User {
    + Guid? UserUUID
    + string UserName
    + string FirstName
    + string LastName
    + byte[]? PasswordHash
    + byte[]? PasswordSalt
    + string Email
    + ERoles? Role
    + bool? Blocked
    + List<Ticket>? CreatedTickets
    + List<Ticket>? AssignedTickets
    + string? Password
    + void SetPassword(string password)
    + bool VerifyPassword(string password)
}

class LoginDTO {
    + string Email
    + string Password
}

class RefreshTokenDTO {
    + string Token
}

enum ERoles {
    USER = 1
    ADMIN = 2
}

enum ETicketState {
    OPEN = 1
    INPROGRESS = 2
    WAITING = 3
    CLOSED = 4
}

class RoleMiddleware {
    - RequestDelegate _requestDelegate
    - JwtService _jwtService
    + RoleMiddleware(RequestDelegate requestDelegate)
    + Task InvokeAsync(HttpContext context)
}

class AItem {
    + long ID
}

class LogEntry {
    + DateTime Timestamp
    + LogLevel Level
    + string Message
}

class Ticket {
    + string Title
    + string Description
    + ETicketState State
    + DateTime CreationTime
    + byte Severity
    + string CVE
    + long CreatorID
    + long? AssignedPersonID
    + User? Creator
    + User? AssignedPerson
}

class SIMSContext {
    + DbSet<LogEntry> logEntries { get; set; }
    + DbSet<Ticket> Tickets { get; set; }
    + DbSet<User> Users { get; set; }
    + SIMSContext(DbContextOptions options)
    + protected override void OnModelCreating(ModelBuilder modelBuilder)
}

class Program {
    + static void Main(string[] args)
}

abstract class AController<Entity> {
    - IRepository<Entity> _repository
    + AController(IRepository<Entity> repository)
    + Task<ActionResult<Entity>> ReadAsync([Required] int id)
    + Task<ActionResult<List<Entity>>> ReadAllAsync()
    + Task<ActionResult> CreateAsync([Required] Entity entity)
    + Task<ActionResult> UpdateAsync([Required] int id, Entity entity)
    + Task<ActionResult> Delete([Required] int id)
}

abstract class ARepository<Entity> {
    - SIMSContext _context
    - DbSet<Entity> _entities
    - DbSet<LogEntry> _logEntry
    + ARepository(SIMSContext context)
    + Task<Entity> CreateAsync(Entity entity)
    + Task DeleteAsync(Entity entity)
    + Task<List<Entity>> GetAllAsync()
    + Task<Entity> GetAsync(long id)
    + Task UpdateAsync(Entity entity)
}

class AuthController {
    - AuthRepository _authRepository
    - UserRepository _userRepository
    + AuthController(UserRepository userRepository, AuthRepository authRepository)
    + Task<IActionResult> Login(LoginDTO login)
    + Task<IActionResult> Refresh(RefreshTokenDTO refresh_token)
    + Task<ActionResult<User>> Register(User user)
}

class LogEntryController {
    + LogEntryController(IRepository<LogEntry> repository)
}

class TicketsController {
    - ITicketRepository _ticketRepository
    + TicketsController(ITicketRepository repository)
    + Task<ActionResult<List<Ticket>>> GetAssignedTicketByUser()
    + Task<ActionResult<List<Ticket>>> GetCreatedTicketByUser()
}

class UserController {
    + UserController(IRepository<User> repository)
}

class AuthRepository {
    - JwtService _jwtService
    - RedisTokenStore _redisTokenStore
    - UserRepository _userRepository
    + AuthRepository(JwtService jwtservice, RedisTokenStore redisTokenStore, UserRepository userRepository)
    + Task<object> Login(string email, string password)
    + Task<object> Refresh(string refresh_token)
}

class LogEntryRepository {
    + LogEntryRepository(SIMSContext context)
}

class TicketRepository {
    - JwtService jwtService
    + TicketRepository(SIMSContext context)
    + override Task<Ticket> GetAsync(long id)
    + override Task<Ticket> CreateAsync(Ticket entity)
    + Task<List<Ticket>> GetAssignedTickets(string access_token)
    + Task<List<Ticket>> GetCreatedTickets(string access_token)
}

class UserRepository {
    + UserRepository(SIMSContext context)
    + Task<User?> GetUserByMailAsync(string mail, string password)
    + Task<User?> GetUserByUsernameAsync(string username)
    + override Task<User> GetAsync(long id)
    + override Task<User> CreateAsync(User entity)
    + private void ValidateUser(User user)
}

interface IRepository<Entity> {
    + Task<Entity> CreateAsync(Entity entity)
    + Task UpdateAsync(Entity entity)
    + Task DeleteAsync(Entity entity)
    + Task<Entity> GetAsync(long id)
    + Task<List<Entity>> GetAllAsync()
}

interface ITicketRepository extends IRepository<Ticket> {
    + Task<List<Ticket>> GetAssignedTickets(string access_token)
    + Task<List<Ticket>> GetCreatedTickets(string access_token)
}

AItem <|-- User
AItem <|-- LogEntry
AItem <|-- Ticket

User -- ERoles
Ticket -- ETicketState

AController <|-- UserController
AController <|-- LogEntryController
AController <|-- TicketsController

ARepository <|-- UserRepository
ARepository <|-- TicketRepository
ARepository <|-- LogEntryRepository
ARepository <|.. IRepository

TicketRepository <|.. ITicketRepository 

AuthController --* AuthRepository 
AuthController --* LoginDTO
AuthController --* RefreshTokenDTO

AuthRepository --* JwtService
AuthRepository --* RedisTokenStore


LogEntryController --* LogEntryRepository
TicketsController --* TicketRepository
UserController --* UserRepository

Program *-- SIMSContext
Program *-- RoleMiddleware
Program *-- AuthController
Program *-- UserController
Program *-- TicketsController
Program *-- LogEntryController

SIMSContext o-- User
SIMSContext o-- LogEntry
SIMSContext o-- Ticket

SIMSContext --* UserRepository
SIMSContext --* TicketRepository
SIMSContext --* LogEntryRepository

@enduml
